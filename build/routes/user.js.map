{"version":3,"sources":["../../server/routes/user.js"],"names":["dotenv","config","silent","userRouter","express","Router","mergeParams","db","database","process","env","DB","use","bodyParser","json","urlencoded","extended","get","getUserId","req","res","next","data","fetchById","user_id","then","status","user","username","credit","role","Number","gender","catch","console","log","error","message","post","checkAuth","body","updateUserData","params","err","errors","global","msg","changes"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEAA,iBAAOC,MAAP,CAAc,EAAEC,QAAQ,IAAV,EAAd;;AAEA,IAAMC,aAAaC,kBAAQC,MAAR,CAAe;AAChCC,eAAa;AADmB,CAAf,CAAnB;AAGA,IAAMC,KAAK,IAAIC,cAAJ,CAAaC,QAAQC,GAAR,CAAYC,EAAzB,EAA6B,OAA7B,CAAX;;AAEAR,WAAWS,GAAX,CAAeC,qBAAWC,IAAX,EAAf;AACAX,WAAWS,GAAX,CAAeC,qBAAWE,UAAX,CAAsB,EAACC,UAAU,IAAX,EAAtB,CAAf;AACA;AACA;AACAb,WAAWc,GAAX,CAAe,QAAf,EAAyBC,qBAAzB,EAAoC,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACtD,MAAIC,OAAO,CAAC,UAAD,EAAY,QAAZ,EAAqB,QAArB,EAA8B,MAA9B,CAAX;AACAf,KAAGgB,SAAH,CAAcJ,IAAIK,OAAlB,EAA4BF,IAA5B,EAAmCG,IAAnC,CAAyC,gBAAQ;AAC/CL,QAAIM,MAAJ,CAAW,GAAX,EAAgBZ,IAAhB,CAAqB;AACnBa,YAAM;AACJC,kBAAUD,KAAKC,QADX;AAEJC,gBAAQF,KAAKE,MAFT;AAGJC,cAAMC,OAAOJ,KAAKG,IAAZ,CAHF;AAIJE,gBAASL,KAAKK,MAAL,KAAgB,IAAjB,GAAyBL,KAAKK,MAA9B,GAAuC,CAAC;AAJ5C;AADa,KAArB;AAQD,GATD,EAUCC,KAVD,CAUQ;AAAA,WAASC,QAAQC,GAAR,CAAYC,MAAMC,OAAlB,CAAT;AAAA,GAVR;AAWD,CAbD;;AAeA;;AAEAlC,WAAWmC,IAAX,CAAgB,gBAAhB,EAAkCC,oBAAlC,EAA6C,UAACpB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAAA,MACvDC,IADuD,GAC9CH,IAAIqB,IAAJ,CAASlB,IADqC,CACvDA,IADuD;;;AAG/Df,KAAGkC,cAAH,CAAkBtB,IAAIuB,MAAtB,EAA8B,EAAEpB,UAAF,EAA9B,EAAwCG,IAAxC,CAA6C,UAACkB,GAAD,EAAKhB,IAAL,EAAc;AACzD,QAAGgB,GAAH,EAAO;AACLvB,UAAIM,MAAJ,CAAW,GAAX,EAAgBZ,IAAhB,CAAqB;AACnB8B,gBAAQ;AACNC,kBAAQF,IAAIG;AADN;AADW,OAArB;AAKD,KAND,MAMO;AACL1B,UAAIM,MAAJ,CAAW,GAAX,EAAgBZ,IAAhB,CAAqB;AACnBiC,iBAAS;AADU,OAArB;AAGD;AACF,GAZD;AAcD,CAjBD;;kBAmBe5C,U","file":"user.js","sourcesContent":["import express from 'express'\nimport database from '../api/user'\nimport bodyParser from 'body-parser'\nimport dotenv from 'dotenv'\nimport checkAuth from '../middleware/check_auth'\nimport getUserId from '../middleware/get_user_id'\n\ndotenv.config({ silent: true })\n\nconst userRouter = express.Router({\n  mergeParams: true\n})\nconst db = new database(process.env.DB, 'users')\n\nuserRouter.use(bodyParser.json())\nuserRouter.use(bodyParser.urlencoded({extended: true}))\n//userRouter.all('*', checkAuth)\n// ---- Get User Data: ------------------------------\nuserRouter.get('/data/', getUserId, (req, res, next) => {\n  var data = ['username','gender','credit','role']\n  db.fetchById( req.user_id , data ).then( user => {\n    res.status(200).json({\n      user: {\n        username: user.username,\n        credit: user.credit,\n        role: Number(user.role),\n        gender: (user.gender !== null) ? user.gender : -1\n      }\n    })\n  })\n  .catch( error => console.log(error.message))\n})\n\n// ---- Save User Data: ------------------------------\n\nuserRouter.post('/data/:user_id', checkAuth, (req, res, next) => {\n  const { data } = req.body.data\n\n  db.updateUserData(req.params, { data }).then((err,user) => {\n    if(err){\n      res.status(400).json({\n        errors: {\n          global: err.msg\n        }\n      })\n    } else {\n      res.status(200).json({\n        changes: true\n      })\n    }\n  })\n\n})\n\nexport default userRouter\n"]}