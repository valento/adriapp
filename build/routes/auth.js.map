{"version":3,"sources":["../../server/routes/auth.js"],"names":["dotenv","config","silent","authRouter","express","Router","mergeParams","use","bodyParser","json","urlencoded","extended","db","database","process","env","DB","lng","lan","get","req","res","undefined","headers","split","match","console","log","fetchOne","query","then","result","status","errors","global","msg","username","message","post","body","credentials","email","password","data","user","bcrypt","compareSync","token","jwt","sign","user_id","role","JWT_SECRET","gender","credit","hash","genSalt","err","signUpUser","params","catch"],"mappings":"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","file":"auth.js","sourcesContent":["import express from 'express'\nimport database from '../api/user'\nimport bodyParser from 'body-parser'\n\nimport jwt from 'jsonwebtoken'\nimport bcrypt from 'bcrypt-nodejs'\nimport dotenv from 'dotenv'\n\ndotenv.config({ silent: true })\n\nconst authRouter = express.Router({\n  mergeParams: true\n})\nauthRouter.use(bodyParser.json())\nauthRouter.use(bodyParser.urlencoded({extended: true}))\n\nconst db = new database(process.env.DB)\nlet lng\nlet lan\n// ==== Check: if user-email exist ===================\nauthRouter.get('/test', (req,res) => {\n  if(lng === undefined) {\n    lng = req.headers['accept-language'].split(',')[0]\n  } else {\n    lan = (lng.match(/^(es)/))? 'es' : 'en'\n  }\n  console.log(lan)\n  //const { email } = req.query//req.body.credentials\n  db.fetchOne( req.query )\n  .then(result => {\n    if(!result || undefined){\n  // If not: invite to subscribe\n      res.status(400).json({\n        errors: {\n          global: 'Suscribe ya...'\n        }\n      })\n    } else {\n      const msg = (lan === 'es') ?\n        ('Como estas, mi ' + result.username + '!') :\n        ('Hello, dear ' + result.username + '!')\n      res.status(200).json( {message: { global: msg } })\n    }\n\n  })\n})\n// ----- AUTH: Signup with crdentials: ----------------\nauthRouter.post('/login', (req,res) => {\n  if(lng === undefined) {\n    lng = req.headers['accept-language'].split(',')[0]\n  } else {\n    lan = (lng.match(/^(es)/))? 'es' : 'en'\n  }\n  console.log(lan)\n  const { email, password } = req.body.credentials\n  let msg\n  if(!email || !password) {\n    msg = (lan === 'es') ?\n      ('Faltan Credenciales!') :\n      ('Missing Credentials!')\n    res.status(400).json({errors: { global: msg }})\n    return\n  }\n  var data = ['email','password','username','gender','credit','role','user_id']\n  db.fetchOne( { email }, data )\n  .then( user => {\n    if(user && bcrypt.compareSync(password, user.password)){\n      const token = jwt.sign({\n        email: user.email,\n        user_id: user.user_id,\n        role: user.role\n      }, process.env.JWT_SECRET)\n      res.status(200).json({\n        user: {\n          token: token,\n          username: user.username,\n          gender: user.gender,\n          credit: user.credit,\n          role: user.role\n        }\n      })\n    } else {\n      msg = (lan === 'es') ?\n        ('Credenciales Incorrectos...') :\n        ('Wrong Credentials...')\n      res.status(400).json({errors: {global: msg}})\n    }\n  })\n})\n// ----- AUTH: Save all crdentials: ------------------\nauthRouter.post('/signup', (req,res) => {\n  if(lng === undefined) {\n    lng = req.headers['accept-language'].split(',')[0]\n  } else {\n    lan = (lng.match(/^(es)/))? 'es' : 'en'\n  }\n  console.log(lan)\n  const { email, password } = req.body.credentials\n  let msg\n  console.log('Server Auth User: ', email)\n  if(!email || !password) {\n    msg = (lan === 'es') ?\n      ('Faltan Credenciales...') :\n      ('Missing Credentials...')\n    res.status(400).json({errors: { global: msg }})\n    return\n  }\n  bcrypt.hash(password, bcrypt.genSalt(8,()=>{}), null, (err, hash) => {\n    db.signUpUser({ email, hash })\n    .then( data => {\n  // !!!! Correct data set:\n      const { email } = data\n      var params = ['email','password','username','gender','credit','role','user_id']\n      db.fetchOne( { email }, params )\n      .then( user => {\n        const token = jwt.sign({\n          email: user.email,\n          user_id: user.user_id,\n          role: user.role\n        }, process.env.JWT_SECRET)\n        res.status(200).json({\n          user: {\n            token: token,\n            username: user.username,\n            gender: user.gender,\n            credit: user.credit,\n            role: user.role\n          }\n        })\n      })\n    })\n    .catch(err => res.status(500).json( {errors: { global: err.message }} ))\n  })\n\n})\n\nexport default authRouter\n"]}