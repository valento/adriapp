{"version":3,"sources":["../../server/api/locations.js"],"names":["database","url","table","fs","stat","err","res","db","SQLite","Database","console","log","message","prototype","fetchLocations","sql","Promise","resolve","reject","all"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEA,SAASA,QAAT,CAAkBC,GAAlB,EAAuBC,KAAvB,EAA8B;AAAA;;AAC5B,MAAI;AACFC,iBAAGC,IAAH,CAAQH,GAAR,EAAa,UAACI,GAAD,EAAKC,GAAL,EAAa;AACxB,UAAGD,GAAH,EAAO;AACL,cAAMA,GAAN;AACD,OAFD,MAEO;AACL,cAAKE,EAAL,GAAU,IAAIC,iBAAOC,QAAX,CAAoBR,GAApB,EAAyB,eAAO;AACxC,cAAG,CAACI,GAAJ,EAASK,QAAQC,GAAR,CAAY,uBAAZ;AACT,cAAGT,KAAH,EAAU;AACR;AACD;AACF,SALS,CAAV;AAMD;AACF,KAXD;AAYD,GAbD,CAcA,OAAMG,GAAN,EAAW;AACTK,YAAQC,GAAR,CAAY,eAAeN,IAAIO,OAA/B;AACD;AACF;;AAEDZ,SAASa,SAAT,CAAmBC,cAAnB,GAAoC,UAASZ,KAAT,EAAgB;AAAA;;AAClD,MAAMa,6CAA2Cb,KAA3C,uBAAN;AACA,SAAO,IAAIc,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,WAAKX,EAAL,CAAQY,GAAR,CAAYJ,GAAZ,EAAiB,UAACV,GAAD,EAAKC,GAAL,EAAa;AAC5B,UAAGD,GAAH,EAAO;AACLa,eAAOb,GAAP;AACD,OAFD,MAEO;AACLY,gBAAQX,GAAR;AACD;AACF,KAND;AAOD,GARM,CAAP;AASD,CAXD;;kBAaeN,Q","file":"locations.js","sourcesContent":["import SQLite from 'sqlite3'\nimport fs from 'fs'\n\nfunction database(url, table) {\n  try {\n    fs.stat(url, (err,res) => {\n      if(err){\n        throw err\n      } else {\n        this.db = new SQLite.Database(url, err => {\n          if(!err) console.log('Locations DB: Success')\n          if(table) {\n            //this.init(table)\n          }\n        })\n      }\n    })\n  }\n  catch(err) {\n    console.log('Wrong DB: ' + err.message)\n  }\n}\n\ndatabase.prototype.fetchLocations = function(table) {\n  const sql = `SELECT location, location_id FROM ${table} ORDER BY location`\n  return new Promise((resolve, reject) => {\n    this.db.all(sql, (err,res) => {\n      if(err){\n        reject(err)\n      } else {\n        resolve(res)\n      }\n    })\n  })\n}\n\nexport default database\n"]}