{"version":3,"sources":["../../server/api/sql.js"],"names":["SQL","url","table","fs","stat","err","res","db","SQLite","Database","console","log","init","message","prototype","serialize","run","q","prepare","params","$email","$gender","$role","$lastlog","Date","now","$credit","$verifyed","finalize","locations","fetchOne","data","that","sql","Promise","resolve","reject","get","email","row","signUpUser","hash","first","last","mail","TypeError","$password","stm","changes","Error"],"mappings":"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","file":"sql.js","sourcesContent":["import SQLite from 'sqlite3'\nimport fs from 'fs'\n\nfunction SQL(url, table) {\n  try {\n    fs.stat(url, (err,res) => {\n      if(err){\n        throw err\n      } else {\n        this.db = new SQLite.Database(url, err => {\n          if(!err) console.log('DB: Success')\n          if(table) {\n            this.init(table)\n          }\n        })\n      }\n    })\n  }\n  catch(err) {\n    console.log('Wrong DB: ' + err.message)\n  }\n}\n\nSQL.prototype.init = function(table) {\n  switch(table) {\n    case 'users' :\n    this.db.serialize(\n      () => {\n        this.db.run(\"CREATE TABLE if not exists users (\" +\n        \"id VARCHAR,\" +\n        \"email VARCHAR,\" +\n        \"password VARCHAR(12),\" +\n        \"verifyed INTEGER,\" +\n        \"first TEXT,\" +\n        \"last TEXT,\" +\n        \"username VARCHAR,\" +\n        \"gender INTEGER,\" +\n        \"lastlog INTEGER,\" +// DATE: last login date to calculate rating/activitie\n        \"credit REAL,\" +//20 initial, buy on PayPal\n        \"payment_metod INTEGER,\" +// default payment metod\n        \"rating REAL,\" +\n        \"role VARCHAR(4),\" +//role access permissions\n        \"location VARCHAR(12),\" +// Lat,Lng\n        \"country VARCHAR(8),\" +\n        \"id_kickstart VARCHAR,\" +//access to LiveParty content\n        \"id_indie VARCHAR,\" +//access to LiveParty content\n        \"id_insta VARCHAR,\" +//passport-session\n        \"id_fb VARCHAR,\" +//passport-session\n        \"refs VARCHAR\" +// referential program ??: How To\n        \");\")\n\n      const q = this.db.prepare(\"INSERT INTO users (email,gender,role,lastlog,credit,verifyed)\" +\n                      \"VALUES ($email, $gender, $role, $lastlog, $credit, $verifyed)\")\n      const params = {\n        $email: 'valentin.mundrov@gmail.com',\n        $gender: 1,\n        $role: 9999,\n        $lastlog: Date.now(),\n        $credit: 1000,\n        $verifyed: true\n      }\n\n      q.run(params)\n      q.finalize()\n    }\n      //\n    )\n\n    break\n    case 'events' :\n      this.db.run(\"CREATE TABLE if not exists events (\" +\n        \"id VARCHAR,\" +\n        \"state INTEGER,\" +//(0=promo, 1=confirmed-comingup, 2=LiveNow!, 3=onKickstarter)\n        \"event VARCHAR,\" +//(for LIVE: Time included)\n        \"location VARCHAR,\" +\n        \"venue VARCHAR,\" +\n        \"time VARCHAR\" +\n        \");\")\n    break\n  }\n}\n\nSQL.prototype.locations = function(table) {\n  //\n}\n\n//Login Fetch User:\nSQL.prototype.fetchOne = function(data = []) {\n  console.log(data)\n  const that = this\n  const sql = `SELECT rowid, gender FROM users WHERE email = ?`\n  return new Promise ((resolve, reject) => {\n    that.db.get(sql, [ data.email ], (err,row) => {\n      if(err){\n        reject(err)\n      } else {\n    //sqlite returns rows = array\n        resolve(row)\n      }\n    })\n  })\n\n}\n\n// On Sign Up record --------------------------------------\nSQL.prototype.signUpUser = function(data) {\n  console.log(data.hash)\n  let first = 'Anon',\n      last = ''\n  if (data.mail === 'valentin.mundrov@gmail.com') {\n    first = 'valentin'\n    last = 'mundrov'\n  } else if (data.mail === 'iloveaquiles09@gmail.com') {\n    first = 'adriana'\n    last = 'perez'\n  }\n  const that = this\n  return new Promise((resolve,reject) => {\n    if(!data) {\n      throw new TypeError('Empty Object provided for Save')\n    }\n    let q = \"INSERT INTO users (email, password, role, credit, verifyed)\" +\n                    \"VALUES ($email, $password, $role, $credit, $verifyed)\"\n    let params = {\n      $email: data.email,\n      $password: data.hash,\n      $role: (data.email === 'valentin.mundrov@gmail.com' || data.email === 'iloveaquiles09@gmail.com') ?\n      9999 : 0,\n      $credit: (data.email === 'valentin.mundrov@gmail.com' || data.email === 'iloveaquiles09@gmail.com') ?\n      0 : 50,\n      $verifyed: 0\n    }\n    let stm = that.db.prepare(q)\n    stm.run(params, err => {\n      if(err){\n        if(this.changes == 0) {\n          reject(new Error('Nothing saved'))\n        }\n        reject(err.message)\n      }\n      else {\n        resolve()\n      }\n    })\n  })\n}\n\nexport default SQL\n"]}