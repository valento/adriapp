{"version":3,"sources":["../../server/api/sql.js"],"names":["SQL","url","table","fs","stat","err","res","db","SQLite","Database","console","log","init","message","prototype","run","locations","signUpUser","data","hash","first","last","mail","that","Promise","resolve","reject","TypeError","q","params","$email","email","$password","$role","$credit","$verifyed","$first","$last","stm","prepare","changes","Error"],"mappings":"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","file":"sql.js","sourcesContent":["import SQLite from 'sqlite3'\nimport fs from 'fs'\n\nfunction SQL(url, table) {\n  try {\n    fs.stat(url, (err,res) => {\n      if(err){\n        throw err\n      } else {\n        this.db = new SQLite.Database(url, err => {\n          if(!err) console.log('DB: Success')\n          if(table) {\n            this.init(table)\n          }\n        })\n      }\n    })\n  }\n  catch(err) {\n    console.log('Wrong DB: ' + err.message)\n  }\n}\n\nSQL.prototype.init = function(table) {\n  switch(table) {\n    case 'users' :\n      this.db.run(\"CREATE TABLE if not exists users (\" +\n      \"id VARCHAR,\" +\n      \"email VARCHAR,\" +\n      \"password VARCHAR(12),\" +\n      \"verifyed INTEGER,\" +\n      \"first TEXT,\" +\n      \"last TEXT,\" +\n      \"username VARCHAR,\" +\n      \"gender INTEGER,\" +\n      \"credit REAL,\" +//20 initial, buy on PayPal\n      \"payment_metod INTEGER,\" +// default payment metod\n      \"rating REAL,\" +\n      \"role VARCHAR(4),\" +//role access permissions\n      \"location VARCHAR(12),\" +// Lat,Lng\n      \"country VARCHAR(8),\" +\n      \"id_kickstart VARCHAR,\" +//access to LiveParty content\n      \"id_indie VARCHAR,\" +//access to LiveParty content\n      \"id_insta VARCHAR,\" +//passport-session\n      \"id_fb VARCHAR,\" +//passport-session\n      \"refs VARCHAR\" +// referential program ??: How To\n      \");\")\n    break\n    case 'events' :\n      this.db.run(\"CREATE TABLE if not exists events (\" +\n        \"id VARCHAR,\" +\n        \"state INTEGER,\" +//(0=promo, 1=confirmed-comingup, 2=LiveNow!, 3=onKickstarter)\n        \"event VARCHAR,\" +//(for LIVE: Time included)\n        \"location VARCHAR,\" +\n        \"venue VARCHAR,\" +\n        \"time VARCHAR\" +\n        \");\")\n    break\n  }\n}\n\nSQL.prototype.locations = function(table) {\n  //\n}\n\n// On Sign Up record --------------------------------------\nSQL.prototype.signUpUser = function(data) {\n  console.log(data.hash)\n  let first = 'Anon',\n      last = ''\n  if (data.mail === 'valentin.mundrov@gmail.com') {\n    first = 'valentin'\n    last = 'mundrov'\n  } else if (data.mail === 'iloveaquiles09@gmail.com') {\n    first = 'adriana'\n    last = 'perez'\n  }\n  const that = this\n  return new Promise((resolve,reject) => {\n    if(!data) {\n      throw new TypeError('Empty Object provided for Save')\n    }\n    let q = \"INSERT INTO users (email, password, role, credit, verifyed, first, last)\" +\n                    \"VALUES ($email, $password, $role, $credit, $verifyed, $first, $last)\"\n    let params = {\n      $email: data.email,\n      $password: data.hash,\n      $role: (data.email === 'valentin.mundrov@gmail.com' || data.email === 'iloveaquiles09@gmail.com') ?\n      9999 : 0,\n      $credit: (data.email === 'valentin.mundrov@gmail.com' || data.email === 'iloveaquiles09@gmail.com') ?\n      0 : 50,\n      $verifyed: 0,\n      $first: first,\n      $last: last\n    }\n    let stm = that.db.prepare(q)\n    stm.run(params, err => {\n      if(err){\n        if(this.changes == 0) {\n          reject(new Error('Nothing saved'))\n        }\n        reject(err.message)\n      }\n      else {\n        resolve()\n      }\n    })\n  })\n}\n\nexport default SQL\n"]}