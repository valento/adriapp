{"version":3,"sources":["../../server/api/user.js"],"names":["database","url","table","fs","stat","err","res","db","SQLite","Database","console","log","message","prototype","locations","login","credentials","fetchOne","data","result_set","that","sql","Promise","resolve","reject","get","email","row","fetchById","updateUserData","update_set","update_fields","key","push","run","user_id","signUpUser","username","role","credit","undefined","q","params","$user_id","$username","$email","$password","hash","$role","$credit","stm","prepare","changes","finalize"],"mappings":"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","file":"user.js","sourcesContent":["import SQLite from 'sqlite3'\nimport fs from 'fs'\n\nfunction database(url, table) {\n  try {\n    fs.stat(url, (err,res) => {\n      if(err){\n        throw err\n      } else {\n        this.db = new SQLite.Database(url, err => {\n          if(!err) console.log('Users DB: Success')\n        })\n      }\n    })\n  }\n  catch(err) {\n    console.log('Wrong DB: ' + err.message)\n  }\n}\n\n// ------- Login: Check PASSWORD!!! ----------------\ndatabase.prototype.locations = function(table) {\n  //\n}\n\ndatabase.prototype.login = function(credentials) {\n  //\n}\n\n// ------ Fetch User: ------------------------------\ndatabase.prototype.fetchOne = function(data = [], result_set = ['email']) {\n  const that = this\n  const sql = `SELECT ${result_set}, username FROM users WHERE email = ?`\n  return new Promise ((resolve, reject) => {\n    that.db.get(sql, [ data.email ], (err,row) => {\n      if(err){\n        reject(err)\n      } else {\n    //sqlite returns rows = array\n        resolve(row)\n      }\n    })\n  })\n\n}\n\ndatabase.prototype.fetchById = function(data = [], result_set) {\n  console.log(data)\n  const that = this\n  const sql = `SELECT ${result_set} FROM users WHERE user_id = ?`\n  return new Promise ((resolve, reject) => {\n    that.db.get(sql, [ data ], (err,row) => {\n      if(err){\n        reject(err)\n      } else {\n        console.log('DB returns: ' , row)\n    //sqlite returns rows = array\n        resolve(row)\n      }\n    })\n  })\n\n}\n\n// ------ Update User Data: -----------------------------\ndatabase.prototype.updateUserData = function(data = [], update_set) {\n  const update_fields = []\n  for(var key in update_set.data){\n    if(key !== 'user_id') {\n      update_fields.push(`${key}=${update_set.data[key]}`)\n    }\n  }\n  console.log('Object to update: ', update_fields)\n  const that = this\n  const sql = `UPDATE users SET ${update_fields} WHERE user_id = ?`\n  return new Promise ((resolve, reject) => {\n    this.db.run(sql, [ data.user_id ], function(err) {\n      if(err){\n        reject(err)\n      } else {\n        resolve()\n      }\n    })\n  })\n\n}\n\n// On Sign Up record --------------------------------------\ndatabase.prototype.signUpUser = function(data) {\n  let username = 'Anon',\n      role = 1000,\n      credit = 10,\n      user_id = undefined\n  if (data.email === 'valentin.mundrov@gmail.com') {\n    username = 'Valento',\n    user_id = 100000001,\n    role = 9999,\n    credit = 999\n  } else if (data.email === 'iloveaquiles09@gmail.com') {\n    username = 'Adri',\n    user_id = 100000002,\n    role = 9999,\n    credit = 999\n  }\n  const that = this\n  return new Promise((resolve,reject) => {\n    if(!data) {\n      reject('Nothing to save')\n    }\n    let q = \"INSERT INTO users (user_id, username, email, password, role, credit)\" +\n                    \"VALUES ($user_id, $username, $email, $password, $role, $credit)\"\n    let params = {\n      $user_id: user_id,\n      $username: username,\n      $email: data.email,\n      $password: data.hash,\n      $role: role,\n      $credit: credit\n    }\n    let stm = that.db.prepare(q)\n    stm.run(params, err => {\n      if(err){\n        if(this.changes == 0) {\n          reject('Nothing saved')\n        }\n        reject(err.message)\n      }\n      else {\n        console.log(data)\n        resolve(data)\n      }\n    })\n    stm.finalize()\n  })\n}\n\nexport default database\n"]}