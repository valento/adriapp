{"version":3,"sources":["../../server/api/user.js"],"names":["userdb","url","table","fs","stat","err","res","db","SQLite","Database","console","log","message","prototype","init","serialize","run","q","prepare","params","$user_id","$email","$gender","$role","$lastlog","Date","now","$credit","finalize","locations","login","credentials","fetchOne","data","result_set","that","sql","Promise","resolve","reject","get","email","row","signUpUser","username","role","credit","user_id","undefined","TypeError","$username","$password","hash","stm","changes"],"mappings":"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","file":"user.js","sourcesContent":["import SQLite from 'sqlite3'\nimport fs from 'fs'\n\nfunction userdb(url, table) {\n  try {\n    fs.stat(url, (err,res) => {\n      if(err){\n        throw err\n      } else {\n        this.db = new SQLite.Database(url, err => {\n          if(!err) console.log('DB: Success')\n          if(table) {\n            //this.init(table)\n          }\n        })\n      }\n    })\n  }\n  catch(err) {\n    console.log('Wrong DB: ' + err.message)\n  }\n}\n\nuserdb.prototype.init = function(table) {\n  switch(table) {\n    case 'users' :\n      this.db.serialize(\n        () => {\n          this.db.run(\"CREATE TABLE if not exists users (\" +\n          \"user_id INTEGER PRIMARY KEY NOT NULL,\" +\n          \"email VARCHAR NOT NULL UNIQUE,\" +\n          \"password VARCHAR NOT NULL UNIQUE,\" +\n          \"verifyed INTEGER DEFAULT 0,\" +\n          \"first TEXT,\" +\n          \"last TEXT,\" +\n          \"username VARCHAR,\" +\n          \"gender INTEGER,\" +\n          \"lastlog INTEGER,\" +// DATE: last login date to calculate rating/activitie\n          \"credit REAL DEFAULT 10,\" +//20 initial, buy on PayPal\n          \"payment_metod INTEGER,\" +// default payment metod\n          \"rating REAL DEFAULT 10,\" +\n          \"role VARCHAR(4) DEFAULT 1000,\" +//role access permissions\n          \"location VARCHAR(12),\" +// Lat,Lng\n          \"country VARCHAR(5),\" +\n          \"likes REAL DEFAULT 0,\" +\n          \"id_kickstart VARCHAR,\" +//access to LiveParty content\n          \"id_indie VARCHAR,\" +//access to LiveParty content\n          \"id_insta VARCHAR,\" +//passport-session\n          \"id_fb VARCHAR,\" +//passport-session\n          \"refs VARCHAR\" +// referential program ??: How To\n          \");\")\n\n        const q = this.db.prepare(\"INSERT INTO users (user_id,email, gender, role, lastlog, credit)\" +\n                        \"VALUES ($user_id, $email, $gender, $role, $lastlog, $credit)\")\n        const params = {\n          $user_id: 100000001,\n          $email: 'valentin.mundrov@gmail.com',\n          $gender: 1,\n          $role: 9999,\n          $lastlog: Date.now(),\n          $credit: 999\n        }\n\n      q.run(params)\n      q.finalize()\n    }\n      //\n    )\n\n    break\n    case 'events' :\n      this.db.run(\"CREATE TABLE if not exists events (\" +\n        \"id VARCHAR,\" +\n        \"state INTEGER,\" +//(0=promo, 1=confirmed-comingup, 2=LiveNow!, 3=onKickstarter)\n        \"event VARCHAR,\" +//(for LIVE: Time included)\n        \"location VARCHAR,\" +\n        \"venue VARCHAR,\" +\n        \"time VARCHAR\" +\n        \");\")\n    break\n  }\n}\n\n// ------- Login: Check PASSWORD!!! ----------------\nuserdb.prototype.locations = function(table) {\n  //\n}\n\nuserdb.prototype.login = function(credentials) {\n  //\n}\n\n// ------ Fetch User: ------------------------------\nuserdb.prototype.fetchOne = function(data = [], result_set = ['email']) {\n  console.log('DB: check this email: ', data)\n  const that = this\n  const sql = `SELECT ${result_set}, username FROM users WHERE email = ?`\n  return new Promise ((resolve, reject) => {\n    that.db.get(sql, [ data.email ], (err,row) => {\n      if(err){\n        reject(err)\n      } else {\n    //sqlite returns rows = array\n        resolve(row)\n      }\n    })\n  })\n\n}\n\n// On Sign Up record --------------------------------------\nuserdb.prototype.signUpUser = function(data) {\n  let username = 'Anon',\n      role = 1000,\n      credit = 10,\n      user_id = undefined\n  if (data.email === 'valentin.mundrov@gmail.com') {\n    username = 'Valento',\n    user_id = 100000001,\n    role = 9999,\n    credit = 999\n  } else if (data.email === 'iloveaquiles09@gmail.com') {\n    username = 'Adri',\n    user_id = 100000002,\n    role = 9999,\n    credit = 999\n  }\n  const that = this\n  return new Promise((resolve,reject) => {\n    if(!data) {\n      throw new TypeError('Empty Object provided for Save')\n    }\n    let q = \"INSERT INTO users (user_id, username, email, password, role, credit)\" +\n                    \"VALUES ($user_id, $username, $email, $password, $role, $credit)\"\n    let params = {\n      $user_id: user_id,\n      $username: username,\n      $email: data.email,\n      $password: data.hash,\n      $role: role,\n      $credit: credit\n    }\n    let stm = that.db.prepare(q)\n    stm.run(params, err => {\n      if(err){\n        if(this.changes == 0) {\n          reject('Nothing saved')\n        }\n        reject(err.message)\n      }\n      else {\n        console.log(data)\n        resolve(data)\n      }\n    })\n    stm.finalize()\n  })\n}\n\nexport default userdb\n"]}